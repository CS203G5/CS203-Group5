name: CI/CD Pipeline for Spring Boot with MySQL

on:
  push:
    branches:
      - main
      - ci-cd-integration
  # pull_request:
    # branches:
      # - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Build and test the Spring Boot app with Maven
      - name: Build with Maven
        run: |
          cd backend
          mvn clean install

      # Step 5: Set up SSH tunnel to MySQL (via EC2 public instance)
      - name: Set up SSH Tunnel to MySQL
        env:
          SSH_KEY: ${{ secrets.EC2_KEY }}  # Ensure the SSH key is saved in GitHub secrets
          USER: ${{ secrets.EC2_USER }}  # EC2 user
          BASTION_HOST: ${{ secrets.EC2_BACKEND_HOST }}  # EC2 public host
          MYSQL_PRIVATE_HOST: ${{ secrets.EC2_MYSQL_HOST }}  # MySQL private EC2 host
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}  # MySQL port
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          # Ensure the SSH key is loaded correctly
          echo "$SSH_KEY" > ssh_key
          chmod 600 ssh_key

          # Set up the SSH tunnel from the public EC2 instance to the private MySQL server
          ssh -N -L 3306:$MYSQL_PRIVATE_HOST:$MYSQL_PORT -i ssh_key -o "StrictHostKeyChecking=no" $USER@$BASTION_HOST &
          sleep 5  # Wait for the tunnel to establish

      # Step 6: Run integration tests (with the SSH tunnel now open)
      - name: Run Integration Tests
        run: |
          mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the successful completion of the build job

    steps:
      # Step 1: Check out code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up SSH
      - name: Set up SSH to EC2 for deployment
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_FRONTEND_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: 22

      # Step 3: Deploy Dockerized Spring Boot Application
      - name: Deploy Spring Boot App to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} ${{ secrets.EC2_GENERAL_USER }}@$${{ secrets.EC2_BACKEND_HOST }} << 'EOF'
          cd /path/to/your/app  # Update the path to where the Spring Boot Docker app is located
          docker-compose down  # Stop previous instance of app
          docker-compose up -d  # Start the new instance
          EOF
