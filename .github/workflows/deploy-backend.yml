name: Build and Deploy Backend to EC2

on:
  push:
    branches:
      - main
      - ci-cd
      
  workflow_dispatch:

jobs:
    build:
      runs-on: ubuntu-latest

      steps:
        - name: Check out code
          uses: actions/checkout@v4

        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: "17"
            distribution: "temurin"
            cache: maven

        - name: Build with Maven
          env:
            DB_URL: ${{ secrets.MYSQL_URL }}
            DB_USERNAME: ${{ secrets.MYSQL_USER }}
            DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          run: |
            mvn -B package --file backend/pom.xml -DskipTests
            mkdir artifacts && cp backend/target/*.jar artifacts

        - name: Save artifact
          uses: actions/upload-artifact@v4
          with:
            name: backend-artifact
            path: artifacts

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Build and push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ./Dockerfile.backend
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend-app:latest

    deploy:
      needs: build
      runs-on: ubuntu-latest

      steps:
        - name: Set up SSH keys with debugging
          env:
            BASTION_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          run: |
            # Create .ssh directory with correct permissions
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            
            # Write key file with explicit newlines
            echo -e "$BASTION_KEY" > ~/.ssh/bastion_key
            chmod 600 ~/.ssh/bastion_key
            
            # Create SSH config
            cat > ~/.ssh/config << 'EOF'
            Host bastion
                HostName ${{ secrets.EC2_FRONTEND_HOST }}
                User ubuntu
                IdentityFile ~/.ssh/bastion_key
                StrictHostKeyChecking no
                UserKnownHostsFile=/dev/null
                LogLevel DEBUG3

            Host private
                HostName 10.0.144.241
                User ubuntu
                IdentityFile ~/.ssh/bastion_key
                StrictHostKeyChecking no
                UserKnownHostsFile=/dev/null
                ProxyCommand ssh -W %h:%p bastion
            EOF
            
            chmod 600 ~/.ssh/config

        - name: Test SSH connection
          run: |
            echo "Testing connection to private instance..."
            ssh private "echo 'Successfully connected to private instance'"

        - name: Deploy to Private EC2
          env:
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            MYSQL_URL: ${{ secrets.MYSQL_URL }}
            MYSQL_USER: ${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          run: |
            ssh private << 'ENDSSH'
              # Export environment variables for use in the SSH session
              export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
              export MYSQL_URL='${{ secrets.MYSQL_URL }}'
              export MYSQL_USER='${{ secrets.MYSQL_USER }}'
              export MYSQL_PASSWORD='${{ secrets.MYSQL_PASSWORD }}'

              echo "Starting deployment on private instance..."
              
              # Pull the latest Docker image
              sudo docker pull $DOCKERHUB_USERNAME/backend-app:latest

              # Remove the existing container if it exists
              sudo docker rm -f backend-container || true 

              # Run new container
              sudo docker run -d \
                --name backend-container \
                --restart unless-stopped \
                -p 8080:8080 \
                -e DB_URL="$MYSQL_URL" \
                -e DB_USERNAME="$MYSQL_USER" \
                -e DB_PASSWORD="$MYSQL_PASSWORD" \
                $DOCKERHUB_USERNAME/backend-app:latest

              # Verify deployment
              echo "Container status:"
              sudo docker ps | grep backend-container
            ENDSSH